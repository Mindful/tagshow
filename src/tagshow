#!/usr/bin/python3

import sys
import os
import code
import readline
import rlcompleter
from image import Image
from renderable import Canvas

EXTENSIONS = [".jpg", ".png", ".gif"]
IMAGES = []


def get_image(name):
    try:
        IMAGES.append(Image(name))
    except:
        print("Could not get image with name ", name)

#TODO: we could save the last version and add an undo(), though we'd also have to save the last command so we could undo
#saves by saving the last version
#also we could better display changes like [x] -> [y]


def display():
    print(IMAGES)


def tag(tagname, value):
    for img in IMAGES:
        img[tagname] = value
    display()


def clear():
    for img in IMAGES:
        img.clear()
    display()


def save():
    for img in IMAGES:
        img.save_properties()
    print(IMAGES, " successfully saved")


def render(show_name):
    for img in IMAGES:
        img.render()
    with open(show_name+'.html', 'w') as f:
        f.write(Canvas.render())
    print("Slideshow named", '"'+show_name+'"', "successfully compiled from ", IMAGES)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        print("Found arguments, attempting to select input files")
        file_names = sys.argv[1:-1]
    else:
        print("No arguments, selecting folder")
        file_names = [name for name in os.listdir(os.getcwd()) if os.path.isfile(os.path.join(os.getcwd(), name)) and
                      "."+name.split(".")[-1] in EXTENSIONS]

    for name in file_names:
        if '.' in name:
            get_image(name)
        else:
            (get_image(name+extension) for extension in EXTENSIONS)


    #TODO: this should support making slideshows too, and selecting/reselecting by tag
    print()
    print("-"*24)
    print("Selected ", IMAGES)
    print("Use the tag(tagname, value) method to tag all selected images, or the clear() method to clear them of tags")
    print("When you are done, call save(), or if you wish to quit without saving call exit()")
    print("You can create a slideshow from the selected images using render(name)")
    print("-"*24)
    print()

    #TODO: we should replace this with a limited terminal that only runs our commands (converts them into python)
    #and throws out everything else
    vars = globals()
    vars.update(locals())
    readline.set_completer(rlcompleter.Completer(vars).complete)
    readline.parse_and_bind("tab: complete")
    shell = code.InteractiveConsole(vars)
    shell.interact()